# -*- coding: utf-8 -*-
"""question3.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1lp6NvluZBY3LGtk6zLhvBzDtHSlB4ZiK
"""

from airflow import DAG
from airflow.operators.python import PythonOperator
from datetime import datetime, timedelta
import pendulum
import boto3
import pandas as pd
import matplotlib.pyplot as plt
import io

#Bucket
S3_BUCKET_NAME = "mcgillis-wu-beam-smith-mwaa"
INPUT_DIR = "weather_data"
OUTPUT_DIR = "output_graphs"

#Default DAG arguments
default_args = {
    'owner': 'mcgillis-wu-beam-smith',
    'depends_on_past': False,
    'retries': 1,
    'retry_delay': timedelta(minutes=5),
}


#Task: Plot temperature, visibility, and relative humidity
def generate_graphs():
    #Read data
    s3 = boto3.client("s3")
    today = datetime.utcnow().strftime('%Y%m%d')

    # You may need to adjust this if the prefix/key pattern is different
    response = s3.list_objects_v2(Bucket=S3_BUCKET_NAME, Prefix=INPUT_DIR + "/")
    dfs = []

    for obj in response.get("Contents", []):
        key = obj["Key"]
        if today in key and key.endswith(".csv"):
            file_obj = s3.get_object(Bucket=S3_BUCKET_NAME, Key=key)
            df = pd.read_csv(io.BytesIO(file_obj['Body'].read()))
            dfs.append(df)

    if not dfs:
        print("No data found for today's graphs.")
        return

    df = pd.concat(dfs)
    df['timestamp'] = pd.to_datetime(df['timestamp'], errors='coerce')
    df = df.dropna(subset=['timestamp'])

    #Loop each metric and plot
    metrics = ['temperature', 'visibility', 'relativeHumidity']
    for metric in metrics:
        plt.figure(figsize=(10, 6))
        for station in df['station'].unique():
            station_df = df[df['station'] == station]
            plt.plot(station_df['timestamp'], station_df[metric], label=station)

        plt.title(f'{metric} over time')
        plt.xlabel('Timestamp')
        plt.ylabel(metric)
        plt.legend()
        plt.tight_layout()

        filename = f"{metric}_{datetime.utcnow().strftime('%Y%m%d')}.png"
        filepath = f"/tmp/{filename}"
        plt.savefig(filepath)
        plt.close()

        with open(filepath, "rb") as f:
            s3.upload_fileobj(f, S3_BUCKET_NAME, f"{OUTPUT_DIR}/{filename}")

#Define DAG
dag = DAG(
    dag_id='daily_weather_dashboard',
    description='Generates daily plots of weather data from S3',
    schedule='@daily',
    start_date=pendulum.today('UTC').add(days=-1),
    catchup=False,
    default_args=default_args,
    tags=['weather', 'dashboard', 's3'],
)


#Define task
task_generate_graphs = PythonOperator(
    task_id='generate_graphs',
    python_callable=generate_graphs,
    dag=dag,
)